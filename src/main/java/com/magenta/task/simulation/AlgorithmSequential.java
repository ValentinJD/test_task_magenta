package com.magenta.task.simulation;

import com.magenta.task.simulation.model.Schedule;
import com.magenta.task.simulation.model.Work;

import java.util.List;

public class AlgorithmSequential implements SimulationAlgorithm {

    @Override
    public Schedule simulate(List<Work> workList) {
        return null;
    }

    /*
     * Описание алгоритма
     * 1. Определяем время движения от распр. центра до первого клиента Тдв.1
     * 2. Определяем суммарное время загрузки заказов данного рейса. Тсум.
     * 3. Определяем время начала загрузки заказов данного рейса
     * Тнач. заг. = Тнач.1окна - Тсум. - Тдв.1
     * Условие
     * Tнач.р.см. < Тнач.заг
     * Нет
     * Устанавливаем время начала загрузки заказов данного рейса
     * Тнач. заг. = Тнач. раб. распрд. центра
     * Да
     * Время начала загрузки заказов данного рейса определено Тнач. заг.
     * Определяем время в пути Т пути
     * Определяем время начала разгрузки заказа Тнач.разгр = Тнач.загр. в р.ц. + Т пути
     * Определяем время окончания разгрузки заказа Тнач.разгр = Тнач.загр. в р.ц. + Т пути
     * Условие Еще есть заказы ?
     * Нет возвращаем результат
     * Да
     * Определяем время в пути Т пути
     * т. 1 Определяем время начала разгрузки заказа Тнач.разгр = Токонч. разгр. пред. заказа  + Т пути
     * Условие Тнач.разгр < Т нач. окна
     * Нет
     * Тнач.разгр  определено
     *Определяем время окончания разгрузки заказа Токонч.разгр = Токонч. разгр. пред. заказа  + Т пути
     * ДА
     * Тнач.разгр = Т нач. окна
     * Условие Еще есть заказы ?
     * Да возвращаемся в т.1
     * Нет
     * Определяем время возвращения в распрд. центр
     * Твозвр.в р.ц. = Токонч. разгр. пред. заказа  + Т пути
     * Возвращаем результат     * */
}
